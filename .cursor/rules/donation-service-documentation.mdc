---
description: Donation Service Documentation
globs:
alwaysApply: true
---

# Sangue Solidário - Donation Service API Documentation

## Overview

The Donation Service is a microservice that manages blood donation requests and donor registrations for the Sangue Solidário platform. It supports both C2C (user-to-user) and B2C (hospital/blood center to donor) donation workflows.

## Base URL

```
http://localhost:8080
```

> **Note**: The default port is `8080` but can be configured via the `PORT` environment variable.

## Table of Contents

- [Authentication](#authentication)
- [Donations API](#donations-api)
  - [Create Donation](#create-donation)
  - [Get All Donations](#get-all-donations)
  - [Get Donation by ID](#get-donation-by-id)
  - [Get Donations by Blood Type](#get-donations-by-blood-type)
  - [Count Donations](#count-donations)
  - [Update Donation Status](#update-donation-status)
  - [Delete Donation](#delete-donation)
  - [Delete Donations by User ID](#delete-donations-by-user-id)
- [Registrations API](#registrations-api)
  - [Create Registration](#create-registration)
  - [Get Registrations by Donation](#get-registrations-by-donation)
  - [Get Registrations by User](#get-registrations-by-user)
  - [Update Registration Status](#update-registration-status)
  - [Cancel Registration](#cancel-registration)
- [Data Models](#data-models)
- [Error Handling](#error-handling)
- [Next.js Integration Examples](#nextjs-integration-examples)

---

## Authentication

The API uses **JWT (JSON Web Token)** authentication for protected endpoints. The donation-service validates JWT tokens generated by the **users-service** (http://localhost:3002).

### Protected Endpoints

The following endpoints require authentication:

- `POST /donations` - Create donation
- `PUT /donations/:id/status` - Update donation status
- `DELETE /donations/:id` - Delete donation

### Getting a Token

Tokens are generated by the **users-service**. To get a token:

1. **Register a user** (if not already registered):

   ```bash
   POST http://localhost:3002/users
   ```

   See [Users Service Documentation](.cursor/rules/users-service-documentation.mdc) for details.

2. **Login** to get a JWT token:

   ```bash
   POST http://localhost:3002/users/authenticate
   Body: { "email": "user@example.com", "password": "password" }
   ```

   Response:

   ```json
   {
     "user": { "id": "...", "email": "...", "personType": "DONOR" },
     "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
   }
   ```

### Token Format

**Header**:

```
Authorization: Bearer <your-jwt-token>
```

### JWT Token Structure

The JWT token from users-service contains:

```json
{
  "id": "50f05b0c-5ce0-4920-9960-11f733f713a7",
  "email": "user@example.com",
  "personType": "DONOR",
  "iat": 1623456789
}
```

### Environment Variables

Required environment variable (must match users-service):

```env
JWT_SECRET=your-secret-key-change-in-production
```

> ⚠️ **Important**:
>
> - The `JWT_SECRET` **must be the same** in both services (users-service and donation-service)
> - Never commit the JWT_SECRET to version control
> - Use environment variables in production

---

## Donations API

### Create Donation

Create a new blood donation request.

**Endpoint**: `POST /donations`

🔒 **Authentication Required**: Yes

**Request Headers**:

```
Content-Type: application/json
Authorization: Bearer <your-jwt-token>
```

**Request Body**:

```json
{
  "status": "PENDING",
  "content": "Urgent blood donation needed for surgery",
  "startDate": "2025-10-20T10:00:00.000Z",
  "finishDate": "2025-10-22T18:00:00.000Z",
  "bloodType": "A+",
  "location": {
    "latitude": -23.5505,
    "longitude": -46.6333
  },
  "userId": "user123",
  "name": "John Doe Hospital",
  "image": "https://example.com/image.jpg"
}
```

**Request Body Parameters**:

| Field              | Type              | Required | Description                             |
| ------------------ | ----------------- | -------- | --------------------------------------- |
| status             | `DonationStatus`  | Yes      | Initial status (usually `PENDING`)      |
| content            | string            | Yes      | Description of the donation request     |
| startDate          | string (ISO 8601) | Yes      | When the donation is needed             |
| finishDate         | string (ISO 8601) | No       | Optional deadline for the donation      |
| bloodType          | `BloodType`       | Yes      | Required blood type                     |
| location           | `Location`        | Yes      | Geographic coordinates                  |
| location.latitude  | number            | Yes      | Latitude coordinate                     |
| location.longitude | number            | Yes      | Longitude coordinate                    |
| userId             | string            | Yes      | ID of the user creating the request     |
| name               | string            | No       | Name of the requester (person/hospital) |
| image              | string            | No       | URL to an image                         |

**Success Response** (201):

```json
{
  "id": "67123abc456def789012",
  "status": "PENDING",
  "content": "Urgent blood donation needed for surgery",
  "startDate": "2025-10-20T10:00:00.000Z",
  "finishDate": "2025-10-22T18:00:00.000Z",
  "bloodType": "A+",
  "location": {
    "latitude": -23.5505,
    "longitude": -46.6333
  },
  "userId": "user123",
  "name": "John Doe Hospital",
  "image": "https://example.com/image.jpg"
}
```

**Error Responses**:

- **400 Bad Request**: Invalid content or malicious code detected

```json
{
  "statusCode": 400,
  "message": "Content is invalid or contains malicious code"
}
```

- **401 Unauthorized**: Missing or invalid JWT token

```json
{
  "statusCode": 401,
  "message": "Unauthorized"
}
```

---

### Get All Donations

Retrieve a paginated list of all donations.

**Endpoint**: `GET /donations`

**Query Parameters**:

| Parameter | Type   | Required | Default | Description                |
| --------- | ------ | -------- | ------- | -------------------------- |
| page      | number | No       | 1       | Page number (must be >= 1) |
| limit     | number | No       | 10      | Items per page (1-100)     |

**Example Request**:

```
GET /donations?page=1&limit=20
```

**Success Response** (200):

```json
{
  "data": [
    {
      "id": "67123abc456def789012",
      "status": "PENDING",
      "content": "Urgent blood donation needed for surgery",
      "startDate": "2025-10-20T10:00:00.000Z",
      "bloodType": "A+",
      "location": {
        "latitude": -23.5505,
        "longitude": -46.6333
      },
      "userId": "user123",
      "name": "John Doe Hospital"
    }
  ],
  "metadata": {
    "page": 1,
    "limit": 20,
    "total": 150,
    "totalPages": 8
  }
}
```

**Error Responses**:

- **400 Bad Request**: Invalid pagination parameters

```json
{
  "statusCode": 400,
  "message": "Page must be a positive number"
}
```

---

### Get Donation by ID

Retrieve a specific donation by its ID.

**Endpoint**: `GET /donations/:id`

**Path Parameters**:

| Parameter | Type   | Description |
| --------- | ------ | ----------- |
| id        | string | Donation ID |

**Example Request**:

```
GET /donations/67123abc456def789012
```

**Success Response** (200):

```json
{
  "id": "67123abc456def789012",
  "status": "PENDING",
  "content": "Urgent blood donation needed for surgery",
  "startDate": "2025-10-20T10:00:00.000Z",
  "bloodType": "A+",
  "location": {
    "latitude": -23.5505,
    "longitude": -46.6333
  },
  "userId": "user123",
  "name": "John Doe Hospital"
}
```

**Error Responses**:

- **404 Not Found**: Donation does not exist

```json
{
  "statusCode": 404,
  "message": "Donation not found"
}
```

---

### Get Donations by Blood Type

Retrieve all donations for a specific blood type.

**Endpoint**: `GET /donations/blood-type/:bloodType`

**Path Parameters**:

| Parameter | Type        | Description                                   |
| --------- | ----------- | --------------------------------------------- |
| bloodType | `BloodType` | Blood type (A+, A-, B+, B-, AB+, AB-, O+, O-) |

**Example Request**:

```
GET /donations/blood-type/A+
```

**Success Response** (200):

```json
[
  {
    "id": "67123abc456def789012",
    "status": "PENDING",
    "content": "Urgent blood donation needed for surgery",
    "startDate": "2025-10-20T10:00:00.000Z",
    "bloodType": "A+",
    "location": {
      "latitude": -23.5505,
      "longitude": -46.6333
    },
    "userId": "user123"
  }
]
```

**Error Responses**:

- **404 Not Found**: No donations found for the blood type

```json
{
  "statusCode": 404,
  "message": "DonationNotFound"
}
```

---

### Count Donations

Get the total number of donations in the system.

**Endpoint**: `GET /donations/count`

**Success Response** (200):

```json
{
  "count": 150
}
```

---

### Update Donation Status

Update the status of a donation.

**Endpoint**: `PUT /donations/:id/status`

🔒 **Authentication Required**: Yes

**Path Parameters**:

| Parameter | Type   | Description |
| --------- | ------ | ----------- |
| id        | string | Donation ID |

**Request Headers**:

```
Content-Type: application/json
Authorization: Bearer <your-jwt-token>
```

**Request Body**:

```json
{
  "status": "APPROVED"
}
```

**Request Body Parameters**:

| Field  | Type             | Required | Description                                         |
| ------ | ---------------- | -------- | --------------------------------------------------- |
| status | `DonationStatus` | Yes      | New status (PENDING, APPROVED, COMPLETED, CANCELED) |

**Success Response** (200):

```json
{
  "id": "67123abc456def789012",
  "status": "APPROVED",
  "content": "Urgent blood donation needed for surgery",
  "startDate": "2025-10-20T10:00:00.000Z",
  "bloodType": "A+",
  "location": {
    "latitude": -23.5505,
    "longitude": -46.6333
  },
  "userId": "user123"
}
```

**Error Responses**:

- **404 Not Found**: Donation does not exist

```json
{
  "statusCode": 404,
  "message": "DonationNotFound"
}
```

- **401 Unauthorized**: Missing or invalid JWT token

```json
{
  "statusCode": 401,
  "message": "Unauthorized"
}
```

---

### Delete Donation

Delete a specific donation.

**Endpoint**: `DELETE /donations/:id`

🔒 **Authentication Required**: Yes

**Path Parameters**:

| Parameter | Type   | Description |
| --------- | ------ | ----------- |
| id        | string | Donation ID |

**Request Headers**:

```
Authorization: Bearer <your-jwt-token>
```

**Example Request**:

```
DELETE /donations/67123abc456def789012
```

**Success Response** (200):

```json
{
  "message": "Donation deleted successfully"
}
```

**Error Responses**:

- **404 Not Found**: Donation does not exist

```json
{
  "statusCode": 404,
  "message": "Donation not found"
}
```

- **401 Unauthorized**: Missing or invalid JWT token

```json
{
  "statusCode": 401,
  "message": "Unauthorized"
}
```

---

### Delete Donations by User ID

Delete all donations created by a specific user.

**Endpoint**: `DELETE /donations/user/:userId`

**Path Parameters**:

| Parameter | Type   | Description |
| --------- | ------ | ----------- |
| userId    | string | User ID     |

**Example Request**:

```
DELETE /donations/user/user123
```

**Success Response** (200):

```json
{
  "message": "Successfully deleted 3 donation(s) for user user123",
  "deletedCount": 3
}
```

---

## Registrations API

Registrations represent users signing up to donate blood for a specific donation request.

### Create Registration

Register a user as a donor for a donation request.

**Endpoint**: `POST /registrations`

**Request Headers**:

```
Content-Type: application/json
```

**Request Body**:

```json
{
  "donationId": "67123abc456def789012",
  "userId": "donor456",
  "notes": "Available to donate on weekday mornings"
}
```

**Request Body Parameters**:

| Field      | Type   | Required | Description                          |
| ---------- | ------ | -------- | ------------------------------------ |
| donationId | string | Yes      | ID of the donation request           |
| userId     | string | Yes      | ID of the user registering to donate |
| notes      | string | No       | Additional notes from the donor      |

**Success Response** (201):

```json
{
  "id": "reg789xyz123",
  "donationId": "67123abc456def789012",
  "userId": "donor456",
  "status": "PENDING",
  "registeredAt": "2025-10-17T14:30:00.000Z",
  "notes": "Available to donate on weekday mornings"
}
```

**Error Responses**:

- **404 Not Found**: Donation does not exist

```json
{
  "statusCode": 404,
  "message": "Donation not found"
}
```

- **409 Conflict**: User already registered for this donation

```json
{
  "statusCode": 409,
  "message": "User already registered for this donation"
}
```

---

### Get Registrations by Donation

Get all registrations for a specific donation request.

**Endpoint**: `GET /registrations/donation/:donationId`

**Path Parameters**:

| Parameter  | Type   | Description |
| ---------- | ------ | ----------- |
| donationId | string | Donation ID |

**Example Request**:

```
GET /registrations/donation/67123abc456def789012
```

**Success Response** (200):

```json
[
  {
    "id": "reg789xyz123",
    "donationId": "67123abc456def789012",
    "userId": "donor456",
    "status": "CONFIRMED",
    "registeredAt": "2025-10-17T14:30:00.000Z",
    "confirmedAt": "2025-10-17T15:00:00.000Z",
    "notes": "Available to donate on weekday mornings"
  },
  {
    "id": "reg789xyz124",
    "donationId": "67123abc456def789012",
    "userId": "donor789",
    "status": "PENDING",
    "registeredAt": "2025-10-17T16:00:00.000Z"
  }
]
```

---

### Get Registrations by User

Get all registrations made by a specific user.

**Endpoint**: `GET /registrations/user/:userId`

**Path Parameters**:

| Parameter | Type   | Description |
| --------- | ------ | ----------- |
| userId    | string | User ID     |

**Example Request**:

```
GET /registrations/user/donor456
```

**Success Response** (200):

```json
[
  {
    "id": "reg789xyz123",
    "donationId": "67123abc456def789012",
    "userId": "donor456",
    "status": "CONFIRMED",
    "registeredAt": "2025-10-17T14:30:00.000Z",
    "confirmedAt": "2025-10-17T15:00:00.000Z",
    "notes": "Available to donate on weekday mornings"
  }
]
```

---

### Update Registration Status

Update the status of a registration.

**Endpoint**: `PATCH /registrations/:id/status`

**Path Parameters**:

| Parameter | Type   | Description     |
| --------- | ------ | --------------- |
| id        | string | Registration ID |

**Request Headers**:

```
Content-Type: application/json
```

**Request Body**:

```json
{
  "status": "CONFIRMED"
}
```

**Request Body Parameters**:

| Field  | Type                 | Required | Description                                          |
| ------ | -------------------- | -------- | ---------------------------------------------------- |
| status | `RegistrationStatus` | Yes      | New status (PENDING, CONFIRMED, COMPLETED, CANCELED) |

**Success Response** (200):

```json
{
  "id": "reg789xyz123",
  "donationId": "67123abc456def789012",
  "userId": "donor456",
  "status": "CONFIRMED",
  "registeredAt": "2025-10-17T14:30:00.000Z",
  "confirmedAt": "2025-10-17T15:00:00.000Z",
  "notes": "Available to donate on weekday mornings"
}
```

**Error Responses**:

- **404 Not Found**: Registration does not exist

```json
{
  "statusCode": 404,
  "message": "Registration not found"
}
```

- **400 Bad Request**: Invalid status

```json
{
  "statusCode": 400,
  "message": "Invalid registration status"
}
```

---

### Cancel Registration

Cancel a registration.

**Endpoint**: `PATCH /registrations/:id/cancel`

**Path Parameters**:

| Parameter | Type   | Description     |
| --------- | ------ | --------------- |
| id        | string | Registration ID |

**Example Request**:

```
PATCH /registrations/reg789xyz123/cancel
```

**Success Response** (200):

```json
{
  "id": "reg789xyz123",
  "donationId": "67123abc456def789012",
  "userId": "donor456",
  "status": "CANCELED",
  "registeredAt": "2025-10-17T14:30:00.000Z",
  "canceledAt": "2025-10-18T10:00:00.000Z",
  "notes": "Available to donate on weekday mornings"
}
```

**Error Responses**:

- **404 Not Found**: Registration does not exist

```json
{
  "statusCode": 404,
  "message": "Registration not found"
}
```

- **400 Bad Request**: Cannot cancel in current status

```json
{
  "statusCode": 400,
  "message": "Cannot cancel registration in current status"
}
```

---

## Data Models

### Donation

```typescript
interface Donation {
  id: string;
  status: DonationStatus;
  content: string;
  startDate: string; // ISO 8601 date string
  finishDate?: string; // ISO 8601 date string (optional)
  bloodType: BloodType;
  location: Location;
  userId: string;
  name?: string;
  image?: string;
}
```

### Registration

```typescript
interface Registration {
  id: string;
  donationId: string;
  userId: string;
  status: RegistrationStatus;
  registeredAt: string; // ISO 8601 date string
  confirmedAt?: string; // ISO 8601 date string (optional)
  completedAt?: string; // ISO 8601 date string (optional)
  canceledAt?: string; // ISO 8601 date string (optional)
  notes?: string;
}
```

### Location

```typescript
interface Location {
  latitude: number;
  longitude: number;
}
```

### Pagination Response

```typescript
interface PaginatedResult<T> {
  data: T[];
  metadata: PaginationMetadata;
}

interface PaginationMetadata {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
}
```

---

## Enums

### DonationStatus

```typescript
enum DonationStatus {
  PENDING = "PENDING", // Initial state
  APPROVED = "APPROVED", // Request approved
  COMPLETED = "COMPLETED", // Donation fulfilled
  CANCELED = "CANCELED", // Request cancelled
}
```

### RegistrationStatus

```typescript
enum RegistrationStatus {
  PENDING = "PENDING", // User registered, awaiting confirmation
  CONFIRMED = "CONFIRMED", // Registration confirmed
  COMPLETED = "COMPLETED", // Donation completed
  CANCELED = "CANCELED", // Registration cancelled
}
```

### BloodType

```typescript
enum BloodType {
  A_POSITIVE = "A+",
  A_NEGATIVE = "A-",
  B_POSITIVE = "B+",
  B_NEGATIVE = "B-",
  AB_POSITIVE = "AB+",
  AB_NEGATIVE = "AB-",
  O_POSITIVE = "O+",
  O_NEGATIVE = "O-",
}
```

---

## Error Handling

All errors follow the standard NestJS HTTP exception format:

```typescript
interface ErrorResponse {
  statusCode: number;
  message: string | string[];
  error?: string;
}
```

### Common HTTP Status Codes

| Status Code | Description                         |
| ----------- | ----------------------------------- |
| 200         | Success                             |
| 201         | Created                             |
| 400         | Bad Request - Invalid input         |
| 401         | Unauthorized - Invalid/missing JWT  |
| 404         | Not Found - Resource does not exist |
| 409         | Conflict - Resource already exists  |
| 500         | Internal Server Error               |

---

## Next.js Integration Examples

### Setting Up API Client

Create an API client utility with JWT authentication support:

```typescript
// lib/api-client.ts
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080";

export class ApiClient {
  private baseUrl: string;
  private token: string | null = null;

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl;
  }

  setToken(token: string) {
    this.token = token;
  }

  clearToken() {
    this.token = null;
  }

  private async request<T>(
    endpoint: string,
    options?: RequestInit
  ): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;

    const headers: HeadersInit = {
      "Content-Type": "application/json",
      ...options?.headers,
    };

    // Add Authorization header if token is available
    if (this.token) {
      headers["Authorization"] = `Bearer ${this.token}`;
    }

    const response = await fetch(url, {
      ...options,
      headers,
    });

    if (!response.ok) {
      if (response.status === 401) {
        throw new Error("Unauthorized - Please login again");
      }
      const error = await response
        .json()
        .catch(() => ({ message: "API request failed" }));
      throw new Error(error.message || "API request failed");
    }

    return response.json();
  }

  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: "GET" });
  }

  async post<T>(endpoint: string, data: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: "POST",
      body: JSON.stringify(data),
    });
  }

  async put<T>(endpoint: string, data: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: "PUT",
      body: JSON.stringify(data),
    });
  }

  async patch<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: "PATCH",
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: "DELETE" });
  }
}

export const apiClient = new ApiClient();
```

### Authentication Context (Next.js)

Create an authentication context to manage JWT tokens:

```typescript
// context/AuthContext.tsx
"use client";

import {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";
import { apiClient } from "@/lib/api-client";

interface AuthContextType {
  token: string | null;
  login: (token: string) => void;
  logout: () => void;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [token, setToken] = useState<string | null>(null);

  useEffect(() => {
    // Load token from localStorage on mount
    const storedToken = localStorage.getItem("jwt_token");
    if (storedToken) {
      setToken(storedToken);
      apiClient.setToken(storedToken);
    }
  }, []);

  const login = (newToken: string) => {
    setToken(newToken);
    localStorage.setItem("jwt_token", newToken);
    apiClient.setToken(newToken);
  };

  const logout = () => {
    setToken(null);
    localStorage.removeItem("jwt_token");
    apiClient.clearToken();
  };

  return (
    <AuthContext.Provider
      value={{
        token,
        login,
        logout,
        isAuthenticated: !!token,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within AuthProvider");
  }
  return context;
}
```

### Type Definitions

Create TypeScript types:

```typescript
// types/donation.ts
export enum DonationStatus {
  PENDING = "PENDING",
  APPROVED = "APPROVED",
  COMPLETED = "COMPLETED",
  CANCELED = "CANCELED",
}

export enum BloodType {
  A_POSITIVE = "A+",
  A_NEGATIVE = "A-",
  B_POSITIVE = "B+",
  B_NEGATIVE = "B-",
  AB_POSITIVE = "AB+",
  AB_NEGATIVE = "AB-",
  O_POSITIVE = "O+",
  O_NEGATIVE = "O-",
}

export interface Location {
  latitude: number;
  longitude: number;
}

export interface Donation {
  id: string;
  status: DonationStatus;
  content: string;
  startDate: string;
  finishDate?: string;
  bloodType: BloodType;
  location: Location;
  userId: string;
  name?: string;
  image?: string;
}

export interface PaginatedResult<T> {
  data: T[];
  metadata: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}
```

```typescript
// types/registration.ts
export enum RegistrationStatus {
  PENDING = "PENDING",
  CONFIRMED = "CONFIRMED",
  COMPLETED = "COMPLETED",
  CANCELED = "CANCELED",
}

export interface Registration {
  id: string;
  donationId: string;
  userId: string;
  status: RegistrationStatus;
  registeredAt: string;
  confirmedAt?: string;
  completedAt?: string;
  canceledAt?: string;
  notes?: string;
}
```

### API Service Layer

Create service functions:

```typescript
// services/donation-service.ts
import { apiClient } from "@/lib/api-client";
import {
  Donation,
  PaginatedResult,
  DonationStatus,
  BloodType,
} from "@/types/donation";

export const donationService = {
  // Get all donations with pagination
  async getAllDonations(
    page = 1,
    limit = 10
  ): Promise<PaginatedResult<Donation>> {
    return apiClient.get<PaginatedResult<Donation>>(
      `/donations?page=${page}&limit=${limit}`
    );
  },

  // Get donation by ID
  async getDonationById(id: string): Promise<Donation> {
    return apiClient.get<Donation>(`/donations/${id}`);
  },

  // Get donations by blood type
  async getDonationsByBloodType(bloodType: BloodType): Promise<Donation[]> {
    return apiClient.get<Donation[]>(`/donations/blood-type/${bloodType}`);
  },

  // Count total donations
  async countDonations(): Promise<{ count: number }> {
    return apiClient.get<{ count: number }>("/donations/count");
  },

  // Create new donation
  async createDonation(donation: Omit<Donation, "id">): Promise<Donation> {
    return apiClient.post<Donation>("/donations", donation);
  },

  // Update donation status
  async updateDonationStatus(
    id: string,
    status: DonationStatus
  ): Promise<Donation> {
    return apiClient.put<Donation>(`/donations/${id}/status`, { status });
  },

  // Delete donation
  async deleteDonation(id: string): Promise<{ message: string }> {
    return apiClient.delete<{ message: string }>(`/donations/${id}`);
  },

  // Delete all donations by user
  async deleteDonationsByUserId(
    userId: string
  ): Promise<{ message: string; deletedCount: number }> {
    return apiClient.delete<{ message: string; deletedCount: number }>(
      `/donations/user/${userId}`
    );
  },
};
```

```typescript
// services/registration-service.ts
import { apiClient } from "@/lib/api-client";
import { Registration, RegistrationStatus } from "@/types/registration";

export const registrationService = {
  // Create new registration
  async createRegistration(data: {
    donationId: string;
    userId: string;
    notes?: string;
  }): Promise<Registration> {
    return apiClient.post<Registration>("/registrations", data);
  },

  // Get registrations by donation
  async getRegistrationsByDonation(
    donationId: string
  ): Promise<Registration[]> {
    return apiClient.get<Registration[]>(
      `/registrations/donation/${donationId}`
    );
  },

  // Get registrations by user
  async getRegistrationsByUser(userId: string): Promise<Registration[]> {
    return apiClient.get<Registration[]>(`/registrations/user/${userId}`);
  },

  // Update registration status
  async updateRegistrationStatus(
    id: string,
    status: RegistrationStatus
  ): Promise<Registration> {
    return apiClient.patch<Registration>(`/registrations/${id}/status`, {
      status,
    });
  },

  // Cancel registration
  async cancelRegistration(id: string): Promise<Registration> {
    return apiClient.patch<Registration>(`/registrations/${id}/cancel`);
  },
};
```

### React Server Component Example

```typescript
// app/donations/page.tsx
import { donationService } from "@/services/donation-service";
import DonationList from "@/components/DonationList";

export default async function DonationsPage({
  searchParams,
}: {
  searchParams: { page?: string };
}) {
  const page = Number(searchParams.page) || 1;
  const { data: donations, metadata } = await donationService.getAllDonations(
    page,
    20
  );

  return (
    <div>
      <h1>Blood Donation Requests</h1>
      <DonationList donations={donations} metadata={metadata} />
    </div>
  );
}
```

### React Client Component Example (with Authentication)

```typescript
// components/CreateDonationForm.tsx
"use client";

import { useState } from "react";
import { donationService } from "@/services/donation-service";
import { DonationStatus, BloodType } from "@/types/donation";
import { useAuth } from "@/context/AuthContext";

export default function CreateDonationForm({ userId }: { userId: string }) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated } = useAuth();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!isAuthenticated) {
      setError("You must be logged in to create a donation");
      return;
    }

    setLoading(true);
    setError(null);

    const formData = new FormData(e.currentTarget);

    try {
      const donation = await donationService.createDonation({
        status: DonationStatus.PENDING,
        content: formData.get("content") as string,
        startDate: new Date(formData.get("startDate") as string).toISOString(),
        bloodType: formData.get("bloodType") as BloodType,
        location: {
          latitude: Number(formData.get("latitude")),
          longitude: Number(formData.get("longitude")),
        },
        userId,
        name: formData.get("name") as string,
      });

      // Handle success (e.g., redirect or show success message)
      console.log("Donation created:", donation);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Failed to create donation"
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {error && <div className="error">{error}</div>}

      <label>
        Description:
        <textarea name="content" required />
      </label>

      <label>
        Blood Type:
        <select name="bloodType" required>
          {Object.values(BloodType).map((type) => (
            <option key={type} value={type}>
              {type}
            </option>
          ))}
        </select>
      </label>

      <label>
        Start Date:
        <input type="datetime-local" name="startDate" required />
      </label>

      <label>
        Name:
        <input type="text" name="name" />
      </label>

      <label>
        Latitude:
        <input type="number" step="any" name="latitude" required />
      </label>

      <label>
        Longitude:
        <input type="number" step="any" name="longitude" required />
      </label>

      <button type="submit" disabled={loading}>
        {loading ? "Creating..." : "Create Donation Request"}
      </button>
    </form>
  );
}
```

### SWR Hook Example (Optional)

If using SWR for data fetching:

```typescript
// hooks/useDonations.ts
import useSWR from "swr";
import { donationService } from "@/services/donation-service";
import { PaginatedResult, Donation } from "@/types/donation";

export function useDonations(page = 1, limit = 10) {
  const { data, error, isLoading, mutate } = useSWR<PaginatedResult<Donation>>(
    `/donations?page=${page}&limit=${limit}`,
    () => donationService.getAllDonations(page, limit)
  );

  return {
    donations: data?.data,
    metadata: data?.metadata,
    isLoading,
    isError: error,
    mutate,
  };
}

export function useDonation(id: string) {
  const { data, error, isLoading, mutate } = useSWR<Donation>(
    id ? `/donations/${id}` : null,
    () => donationService.getDonationById(id)
  );

  return {
    donation: data,
    isLoading,
    isError: error,
    mutate,
  };
}
```

### Environment Variables

Create a `.env.local` file in your Next.js project:

```env
NEXT_PUBLIC_API_URL=http://localhost:8080
```

For production:

```env
NEXT_PUBLIC_API_URL=https://api.sanguesolidario.com
```

### Backend Environment Variables

In the donation service, create a `.env` file:

```env
PORT=8080
MONGO_INITDB_ROOT_USERNAME=admin
MONGO_INITDB_ROOT_PASSWORD=password123
JWT_SECRET=your-super-secret-jwt-key-change-in-production
```

> ⚠️ **Security Notes**:
>
> - Never commit `.env` files to version control
> - Use strong, randomly generated secrets in production
> - Rotate JWT secrets regularly
> - Use different secrets for different environments

---

## Best Practices

### 1. Error Handling

Always wrap API calls in try-catch blocks:

```typescript
try {
  const donation = await donationService.getDonationById(id);
  // Handle success
} catch (error) {
  // Handle error
  console.error("Failed to fetch donation:", error);
}
```

### 2. Loading States

Show loading indicators during API calls:

```typescript
const [loading, setLoading] = useState(false);

const fetchData = async () => {
  setLoading(true);
  try {
    const data = await donationService.getAllDonations();
    // Handle data
  } finally {
    setLoading(false);
  }
};
```

### 3. Date Handling

Always use ISO 8601 format for dates:

```typescript
const startDate = new Date().toISOString();
```

### 4. Validation

Validate data before sending to the API:

```typescript
if (!content || content.length < 10) {
  throw new Error("Content must be at least 10 characters");
}
```

### 5. Pagination

Implement proper pagination UI:

```typescript
const handlePageChange = (newPage: number) => {
  router.push(`/donations?page=${newPage}`);
};
```

---

## Rate Limiting

> **Note**: No rate limiting is currently implemented. Consider implementing rate limiting before production deployment.

---

## Support

For questions or issues, please contact the development team or create an issue in the project repository.

---

**Last Updated**: October 17, 2025  
**API Version**: 1.0.0
